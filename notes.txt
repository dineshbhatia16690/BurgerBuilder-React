{......code is for normal function body}
(......code is for functions returning JSX code)
{ return (.....code) }

Promises in JS:
- Promise in JS: Watch this video(https://www.youtube.com/watch?v=vn3tm0quoqE)
	- Event loop in browser and node JS runs on a single thread.
	- On the first run it runs all synchronous operations and micro async tasks.
	- Promises are better than callbacks(you get callback after completing an async task),
	  in Promise you get a Promise object back after async task is finished. Better cleaner code.
	- "async" and "await" are just syntactical sugar to the Promise. "async" returns a promise.
	  Instead of that you can also use, "Promise.resolve(<your code>)".
	- "await" should be used with "async"(only makes sense)
	- (Imp.) .map() doesn't honor "await" keyword, it runs everything parallely, so use conventional "for" loop when
	  you need to wait for a Promise to resolve on every element of a collection.
	- If we call an async function that returns a Promise and that call gets rejected, we need to
	  use await with that function call or use .catch right after that function call.
	  For more info, check: https://itnext.io/error-handling-with-async-await-in-js-26c3f20bc06a

================================= Project Burger Builder =================================

Setting up the Project:
- Eject css modules (npm run eject)
- Clean up extra files
- Set up font and title for the project

Creating a layout Component:
- Structurized the project and created a simple layout adding toolbar, sidebar and backdrop.
- Since we don't have the navigation yet, so the focus is to develop the core functionality.

Starting implementation of the Burger Builder Container:
- Added a layout.css file which will have the underneath layout.
- Changed webpack.config.js to enable css modules.

Adding a dynamic Ingredient component and add prop type:
- Added a ingredient component.
- Added prop-types package using "npm install --save prop-types"

Starting the Burger component:
- Added the burger component and hardcoded ingredients.

Outputting Burger Ingredient Dynamically:
- Added ingredients to state to dynamically add them.
- Added transformed ingredient variable in Burger.js which essentially transforms the js object of values into array which
  contains values(ingredient) as many times as the quantity.

Calculating the Ingredient sum Dynamically:
- Takes care of showing a message to add ingredients if there is no ingredient or value 0 for each ingredient.
- Does so by using flattening the array so that all inner arrays elements are extracted in one array.

Adding the build control component:
- Adds styling for build control component, the label, buttons, etc.

Outputting the multiple build controls:
- Added build control buttons and shows all the build controls components together.

Connecting state to Build Controls:
- Added a method to addIngredients
- Updated all the components to accommodate more button function
- Linked more button functionality

Remove Ingredients Safely:
- Implemented logic for removing ingredients
- Added disabling the less button functionality in case the ingredient is not added

Displaying and Updating the burger price:
- Displayed Price of the burger too.
- Also fixed the JS bug of decimals from a lot to use toFixed(2) method to use upto 2 decimal points.

Adding the order button:
- Added Order button and linked it with no of items added(used total Price logic)
- Only gets enabled if there is anything added in the burger

Creating the order summary:
- Created a Modal component which will contain the modal to wrap the order summary with.
- Created an order summary component which shows the summary of what user has selected in the burger

Showing and Hiding the modal with Animation:
- Makes use of the animation to show Order summary on click of Order now button

Implementing the Backdrop Component:
- Added backdrop for the modal

Adding and Implementing a custom button component:
- Added cancel and continue button on Order summary component.
- Cancel button goes back to the main page and Continue button for now just shows an alert message.

Adding the Price to the Summary:
- Added the price to the order summary component

Adding a toolbar:
- Added a toolbar in layout, the toolbar will be there on all the pages so it has to be added on the root component

Adding a Logo:
- Added a logo in the assets folder

Adding reusable Navigation items:
- Added Navigation bar on top with two options: Burger Builder and Checkout
- Added the routing to the only page since we just have one as of now

Creating a responsive SideDrawer(for mobile/tablet devices):
- Created a sideDrawer for Mobile devices
- To verify select Mobile/Tablet on inspect tab in Chrome, the formatting is still to be done

Working on Responsive Adjustments:
- There is couple of ways to adjust the height of the logo depending on the device
    - a) We can dynamically pass the height as a prop
    - b) We can wrap the Logo component with a div and add a Logo class everywhere we are using the Logo component.
         Keeping same name (Logo) class in diff components won't interfere with each other.

More on Responsive Adjustments:
- Adjusted Navigation Items to be responsive.
- Used media query to override the styles for desktops.

Reusing the backdrop:
- Reused backdrop in the SideDrawer as well.
- Added functionality to close the SideDrawer when clicked on the BackDrop.

Adding a SideDrawer Toggle Button:
- Moved MENU to a DrawerToggle component for sideDrawer

Adding a Hamburger Icon:
- Added a css file for drawer toggle that has style for the div
- A hamburger icon is basically nothing but a simple horizontal styled line, that's why we have 3 divs that makes it up.

* We can add Prop type validation to our components, the reason it hasn't yet been added is because we are not using
  any 3P library, but having Prop type validation is a good practice.

Improving Performance:
- There are some areas where we can add shouldComponentUpdate kind of hooks to avoid unnecessary re-rendering of
  components.
- Keep in mind that wrapping component has control over the wrapped components if they are to be updated or not since we
  use shouldComponentUpdate in the wrapping component.
- Modal component has OrderSummary component which is one of those. So lets take care of that.
- To verify the component was updated we can use componentWillUpdate or componentDidUpdate(depending on your JS version)

Changing the Folder structure:
- Moved Layout folder to hoc folder since Layout is just acting as a wrapper around components.
- Its a fair argument that Layout could be part of container folder and both are correct.


**************** Accessing a server - Using Firebase as backend ****************

Firebase - Free service from google that provides database, hosting, etc like services. Need google account to sign in and
           create a firebase project and it gives you a URL to access the service, all you have to do is set the rules.
           e.g. In our case set both read and write to true to allow reads and writes.
           ProjectName: react-burger-builder092019
           Firebase Link: firebase.google.com
           Google Account Used: dinesh.bhatia690
           Database Link: https://react-burger-builder092019.firebaseio.com/

Creating Axios Instance:
- Install axios using 'npm install --save axios'.
- Create axios-orders file to get the base url which is the url of the firebase db.

Sending a POST request:
- Implement functionality for sending a post request when pressed "Continue" on checkout.
- Added '/orders.json' endpoint for checking out an order. (Check how record appears in Firebase)

Displaying a Spinner while sending a request:
- Added a spinner class(chose spinner css from https://projects.lukehaas.me/css-loaders/)
- Updated Order summary to have spinner if the order is being checked out, since firebase call is super quick,
  we barely get to see spinner in action.
- Updated shouldComponentUpdate in Modal since spinner won't appear because our Modal was not getting updated
  since we are using shouldComponentUpdate in Modal hook and update was only done if there is change on show prop and
  in this case we are updating the child component.

Handling Errors:
- Added a global error handler that gets any component and handles error on those and show the error message.
- To see this change in action, change the "orders.json" to "orders" and try to place the order.

Retrieving Data from Backend:
- Added a axios get api call to retrieve the state ingredients dynamically from the firebase db at the start

Removing Old Interceptors:
- Using interceptors with global error handler can result in memory leak, since that global error handler could be
  wrapped with multiple components and we are using the axios instance in componentWillMount which will run for each component
  so the previous component's axios instance can interfere and cause memory leaks.
- So to avoid that we need to eject those interceptors and there is a hook for that known as "ComponentWillUnmount".
- To eject interceptors in functional component you can add the ejects in return statement of useEffect() hook.
  (Made some changes to app.js to see ComponentWillUnmount in action, will be removed in next commit)





















