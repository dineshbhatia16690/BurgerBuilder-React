{......code is for normal function body}
(......code is for functions returning JSX code)
{ return (.....code) }

Promises in JS:
- Promise in JS: Watch this video(https://www.youtube.com/watch?v=vn3tm0quoqE)
	- Event loop in browser and node JS runs on a single thread.
	- On the first run it runs all synchronous operations and micro async tasks.
	- Promises are better than callbacks(you get callback after completing an async task),
	  in Promise you get a Promise object back after async task is finished. Better cleaner code.
	- "async" and "await" are just syntactical sugar to the Promise. "async" returns a promise.
	  Instead of that you can also use, "Promise.resolve(<your code>)".
	- "await" should be used with "async"(only makes sense)
	- (Imp.) .map() doesn't honor "await" keyword, it runs everything parallely, so use conventional "for" loop when
	  you need to wait for a Promise to resolve on every element of a collection.
	- If we call an async function that returns a Promise and that call gets rejected, we need to
	  use await with that function call or use .catch right after that function call.
	  For more info, check: https://itnext.io/error-handling-with-async-await-in-js-26c3f20bc06a

================================= Project Burger Builder =================================

Setting up the Project:
- Eject css modules (npm run eject)
- Clean up extra files
- Set up font and title for the project

Creating a layout Component:
- Structurized the project and created a simple layout adding toolbar, sidebar and backdrop.
- Since we don't have the navigation yet, so the focus is to develop the core functionality.

Starting implementation of the Burger Builder Container:
- Added a layout.css file which will have the underneath layout.
- Changed webpack.config.js to enable css modules.

Adding a dynamic Ingredient component and add prop type:
- Added a ingredient component.
- Added prop-types package using "npm install --save prop-types"

Starting the Burger component:
- Added the burger component and hardcoded ingredients.

Outputting Burger Ingredient Dynamically:
- Added ingredients to state to dynamically add them.
- Added transformed ingredient variable in Burger.js which essentially transforms the js object of values into array which
  contains values(ingredient) as many times as the quantity.

Calculating the Ingredient sum Dynamically:
- Takes care of showing a message to add ingredients if there is no ingredient or value 0 for each ingredient.
- Does so by using flattening the array so that all inner arrays elements are extracted in one array.

Adding the build control component:
- Adds styling for build control component, the label, buttons, etc.

Outputting the multiple build controls:
- Added build control buttons and shows all the build controls components together.

Connecting state to Build Controls:
- Added a method to addIngredients
- Updated all the components to accommodate more button function
- Linked more button functionality

Remove Ingredients Safely:
- Implemented logic for removing ingredients
- Added disabling the less button functionality in case the ingredient is not added

Displaying and Updating the burger price:
- Displayed Price of the burger too.
- Also fixed the JS bug of decimals from a lot to use toFixed(2) method to use upto 2 decimal points.

Adding the order button:
- Added Order button and linked it with no of items added(used total Price logic)
- Only gets enabled if there is anything added in the burger

Creating the order summary:
- Created a Modal component which will contain the modal to wrap the order summary with.
- Created an order summary component which shows the summary of what user has selected in the burger

Showing and Hiding the modal with Animation:
- Makes use of the animation to show Order summary on click of Order now button

Implementing the Backdrop Component:
- Added backdrop for the modal

Adding and Implementing a custom button component:
- Added cancel and continue button on Order summary component.
- Cancel button goes back to the main page and Continue button for now just shows an alert message.

Adding the Price to the Summary:
- Added the price to the order summary component

Adding a toolbar:
- Added a toolbar in layout, the toolbar will be there on all the pages so it has to be added on the root component

Adding a Logo:
- Added a logo in the assets folder

Adding reusable Navigation items:
- Added Navigation bar on top with two options: Burger Builder and Checkout
- Added the routing to the only page since we just have one as of now

Creating a responsive SideDrawer(for mobile/tablet devices):
- Created a sideDrawer for Mobile devices
- To verify select Mobile/Tablet on inspect tab in Chrome, the formatting is still to be done

Working on Responsive Adjustments:
- There is couple of ways to adjust the height of the logo depending on the device
    - a) We can dynamically pass the height as a prop
    - b) We can wrap the Logo component with a div and add a Logo class everywhere we are using the Logo component.
         Keeping same name (Logo) class in diff components won't interfere with each other.

More on Responsive Adjustments:
- Adjusted Navigation Items to be responsive.
- Used media query to override the styles for desktops.

Reusing the backdrop:
- Reused backdrop in the SideDrawer as well.
- Added functionality to close the SideDrawer when clicked on the BackDrop.

Adding a SideDrawer Toggle Button:
- Moved MENU to a DrawerToggle component for sideDrawer

Adding a Hamburger Icon:
- Added a css file for drawer toggle that has style for the div
- A hamburger icon is basically nothing but a simple horizontal styled line, that's why we have 3 divs that makes it up.

* We can add Prop type validation to our components, the reason it hasn't yet been added is because we are not using
  any 3P library, but having Prop type validation is a good practice.

Improving Performance:
- There are some areas where we can add shouldComponentUpdate kind of hooks to avoid unnecessary re-rendering of
  components.
- Keep in mind that wrapping component has control over the wrapped components if they are to be updated or not since we
  use shouldComponentUpdate in the wrapping component.
- Modal component has OrderSummary component which is one of those. So lets take care of that.
- To verify the component was updated we can use componentWillUpdate or componentDidUpdate(depending on your JS version)

Changing the Folder structure:
- Moved Layout folder to hoc folder since Layout is just acting as a wrapper around components.
- Its a fair argument that Layout could be part of container folder and both are correct.


**************** Accessing a server - Using Firebase as backend ****************

Firebase - Free service from google that provides database, hosting, etc like services. Need google account to sign in and
           create a firebase project and it gives you a URL to access the service, all you have to do is set the rules.
           e.g. In our case set both read and write to true to allow reads and writes.
           ProjectName: react-burger-builder092019
           Firebase Link: firebase.google.com
           Google Account Used: dinesh.bhatia690
           Database Link: https://react-burger-builder092019.firebaseio.com/

Creating Axios Instance:
- Install axios using 'npm install --save axios'.
- Create axios-orders file to get the base url which is the url of the firebase db.

Sending a POST request:
- Implement functionality for sending a post request when pressed "Continue" on checkout.
- Added '/orders.json' endpoint for checking out an order. (Check how record appears in Firebase)

Displaying a Spinner while sending a request:
- Added a spinner class(chose spinner css from https://projects.lukehaas.me/css-loaders/)
- Updated Order summary to have spinner if the order is being checked out, since firebase call is super quick,
  we barely get to see spinner in action.
- Updated shouldComponentUpdate in Modal since spinner won't appear because our Modal was not getting updated
  since we are using shouldComponentUpdate in Modal hook and update was only done if there is change on show prop and
  in this case we are updating the child component.

Handling Errors:
- Added a global error handler that gets any component and handles error on those and show the error message.
- To see this change in action, change the "orders.json" to "orders" and try to place the order.

Retrieving Data from Backend:
- Added a axios get api call to retrieve the state ingredients dynamically from the firebase db at the start

Removing Old Interceptors:
- Using interceptors with global error handler can result in memory leak, since that global error handler could be
  wrapped with multiple components and we are using the axios instance in componentWillMount which will run for each component
  so the previous component's axios instance can interfere and cause memory leaks.
- So to avoid that we need to eject those interceptors and there is a hook for that known as "ComponentWillUnmount".
- To eject interceptors in functional component you can add the ejects in return statement of useEffect() hook.
  (Made some changes to app.js to see ComponentWillUnmount in action, will be removed in next commit)

******************************** What is Routing? ********************************
- Routing is basically a way to route the user to different pages/components of the application on the basis of URL. e.g.
 /blog, /users/, /account, etc. React just provides a way to create components but we extend its functionalities by
 adding routing in it with the support of external package like "Router Package".
- Router Package parses the URL/path, reads the config provided by the user and renders/loads appropriate JSX/Component.
- To download the Router package, use command: "npm install --save react-router-dom". "react-router-dom" wraps "react-router"
  and uses it as a dependency.
- When we switch pages within our application, it shouldn't reload the pages. For that, we use "Link" with "to" property.
  .e.g. <Link to="/users"> Users </Link>. It internally creates an anchor tag(a href) and takes care of the routing without
  reloading.
- We get bunch of props in the component from the router like "history, match, etc". To pass those props to the lower order
 components (which are just presentational/stateless) wrap those with "export default withRouter(component_name)".
- Link property doesn't provide the css style property so instead of that we use "NavLink" which comes with a default css
  class which we can override and add our own styles to it. It also provides other properties like activeClassName,
  activeStyle, etc.
- We can do routing programmatically by using the methods provided by history in the props. e.g. this.props.history.push.
- We can do nested routing in the component through which we can route to certain component from our component. For that,
  our component or the parent component should be wrapped with "<BrowserRouter>" component.
- The way to create nested routes is to get the base route dynamically by using "this.props.match.url" and then append the
  nested route part of the url to it.
- You can redirect to different routes by importing "Redirect" property from the react-dom and use it like
  "<Redirect from="/" to="/url"/>". It doesn't render content, it just changes the url. We can also use Redirect conditionally.
- Better way to redirecting is using "history" prop by pushing the page to be redirected to into it. e.g.
  "this.props.history.push('/posts')". Push basically pushes the page into the stack. We can also use "this.props.history.replace('/posts')"
- Routing can also be used as Guards.e.g. If the user is not authenticated, you can use redirect/replace to route the user to some other page.
- 404 cases can also be handled using Redirects. You can also handle such cases with only Route property.
  e.g "<Route render={() => <h1> Not Found</h1> />".
- Lazy loading is the technique to load components lazily.
    (To learn more, watch this: https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/8138598#content)


******************************** Adding Routing to the project ********************************

Building the Checkout container:
- Added a checkout container to display the checkout page which is shown when the user clicks "continue" on the checkout.
- Checkout page shows the summary of the burger and a cancel and continue button.
- The challenge is that to show the summary we need to have the state which has the ingredients of the burger to show in
  summary page which for now in this commit is hardcoded but will be done using Routing.
  (Check changes ...)

Setting Up Routes and Routing:
- Install the react-router-dom package using command "npm install --save react-router-dom"
- Set up the route paths for burger builder and checkout components.

Navigating to the Checkout page:
- The special props like history, match, etc are only available to the directly routed components not to the components
  nested inside these components. To access these props in the nested components we need to export the nested components
  using "withRouter".
- Added a temporary routing from purchaseHandler to the checkout page.
  (Check code changes ...)

Navigating Back and to the next page:
- Bind methods to the checkout summary "cancel" and "continue" buttons.

Passing Ingredients via query param:
- Passing the ingredients from the burger builder to the Checkout component using query params
- Encoded while sending and extracted in the componentDidMount hook of the Checkout component
  (Check code changes ... )

Navigating to the Customer Data component:
- Added a new component that shows a form to add the customer details for the order
- Added navigation to the CustomerData component
- Added styling to the CustomerData component

Order submission and passing data between pages:
- Added the logic for submitting the order, moved it to an order handler in CustomerData page.
- Used render property in Checkout component to pass props like ingredients, price and all the props to the CustomerData
  component.
- Added spinner to the form during the axios call
- Added routing from the order page to the '/' page after the order is placed (used props that come with Route to pass
  down to Customer data to make routing work after the axios call, same could have also been achieved using withRouter)
  (Check code changes ...)

Adding an Orders Page:
- Added a dummy order page and route.

Implementing Navigation Links:
- Implemented NavLink to link to the orders page.

Fetching Orders:
- Implemented logic in Orders.js to fetch the orders from Firebase.
- Wrapped the Orders.js with globalErrorHandler to handle any errors.

Outputting the orders:
- Fixed a bug where price was not showing up.
- Outputted the order component and gave it some styling (make sure to use className= for giving styles using class and
  style={{}} for giving inline styles).
  (Check code changes ...)


******************************** What is Redux? ********************************

Redux is a global store that is used for state management. State is basically the observable properties that control the behavior of the
component. E.g. State is:
    - Ingredients in our burger application
    - Is User authenticated?
    - Is Modal(Side drop) open?
    etc.

- Redux Flow works in 3 sections starting from Component dispatching an Action(add, delete, update). The Action then
  reaches Reducers which are pure, sync functions that receive an action and has two params: type of action and currentState,
  and return the updated state to the user. Reducers then updates the Central store with the updated state.
- Read flow in redux works using subscription model. Everytime there is an update in the central store triggers a notification
  to the subscribed components and passes updated state as props.
- To hook up redux store with react application we need to install "react-redux" package and from that use "Provider" component
  and wrap our App component with Provider passing "store={store_name}" prop with it.
- Actions can be dispatched which are not even handled in reducer, for that always return currentState in the reducer at the end.


******************************** Adding Redux to the project ********************************

Basic Redux Set Up:
- Install redux in the package using the command: npm install --save redux react-redux
- Set up add and remove action types.
- Wrap the App component with Provider component. The Provider component wrapping the BrowserRouter component creates a little
  confusion since both of these sets properties on props.
- Setting the store property on provider component connects your store to the redux store.

Finishing the Reducer for Ingredients:
- Added part of reducer logic to add and remove ingredients.
- The ingredient we need to amend we can use [] to extract that ingredient which we are supposed to get with the action
  so, it should be [action.ingredientName].
- As we are gonna be adding and removing ingredients one by one so we amend [action.ingredientName] +- 1

Connecting the Burger Builder container to our store:
- Created mapStateToProps to get the state from the redux store as props and mapDispatchToProps to access methods to change
  the redux store state as props.
- The methods in mapDispatchToProps take ingName as an argument which is passed as ctrl.type in the BuildControls component.
- Removed componentDidMount from BurgerBuilder since we are now loading the starting ingredients from redux store.
- Finally we use the connect method in which we pass mapStateToProps and mapDispatchToProps and also pass our BurgerBuilder
  component wrapped with higher order Error handling component.
- The totalPrice is still yet to be taken care of.

Working on the totalPrice calculation:
- Calculating the price in reducer.
- Remove methods put to calculate the totalPrice in BurgerBuilder

Redux and UI state:
- Enabled the "ORDER NOW" button by checking the global state's price.
- Check how much our state is shrunk in BurgerBuilder component, we can always put everything from state into the redux store
  and access from there but that is not recommended since the left overs are burger builder specific state elements.

Adjusting Checkout and CustomerData components:
- Connected both Checkout and CustomerData components with redux store to access the state.
- Removed query params used in BurgerBuilder to pass ingredients to Checkout.
- Used the same name as ings and price in the mapStateToProps to keep the consistency, however any name can be used since
  that is local to the file.
- Both Checkout and CustomerDate are not dispatching any methods so they don't have mapDispatchToProps.
- connect function expects arguments in the order (mapStateToProps, mapDispatchToProps) so when there is only mapDispatchToProps
  we will have to call connect like 'connect(null, mapDispatchToProps)'.






























